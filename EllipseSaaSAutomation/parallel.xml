<project name="SaaSAutomation-parallel" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="src.dir" value="src" />
    <property name="test.set" value="${test.set}" />
	<property name="newreport.dir" value="report" />
    <property name="report.tmp" value="${report.dir}/tmp" />
    <property name="saas.dir" value="src/com/abb/ventyx/saas/" />
    <property name="requestleave.dir" value="src/com/abb/ventyx/saas/requestleave/" />
    <property name="pickstock" value="src/com/abb/ventyx/saas/pickstock" />
    <property name="support" value="src/com/abb/ventyx/saas/support" />
	<property environment="env"/>
    <!-- define properties and paths for the current run -->
    <path id="other.source.path">
		<fileset dir="${src.dir}">
			<include name="${other.source.expression}" />
		</fileset>
	</path>
    
    <path id="all.source.path">
        <sort>
            <fileset dir="${src.dir}">                
            	<include name="**/testng_*.xml" />
            </fileset>
        </sort>
    </path>    
    <path id="saas.source.path">
        <sort>
            <fileset dir="${saas.dir}">
                <include name="**/testng_*.xml" />                                
            </fileset>
        </sort>
    </path>    
    <path id="support.source.path">
        <sort>
            <fileset dir="${support.dir}">
                <include name="**/testng_*.xml" />                
            </fileset>
        </sort>
    </path>   
    <path id="pickstock.source.path">
        <sort>
            <fileset dir="${pickstock.dir}">
                <include name="**/testng_*.xml" />                
            </fileset>
        </sort>
    </path>    
    <path id="requestleave.source.path">
        <sort>
            <fileset dir="${requestleave.dir}">
                <include name="**/testng_*.xml" />                
            </fileset>
        </sort>
    </path>   
	<switch value="${test.set}">
		<case value="saas">
			<property name="src.dir" value="${saas.dir}" />
			<path id="test.set.source.path">
				<path refid="saas.source.path" />
			</path>
		</case>
		<case value="support">
			<property name="src.dir" value="${support.dir}" />
			<path id="test.set.source.path">
				<path refid="support.source.path" />
			</path>
		</case>
		<case value="pickstock">
			<property name="src.dir" value="${pickstock.dir}" />
			<path id="test.set.source.path">
				<path refid="pickstock.source.path" />
			</path>
		</case>
		<case value="requestleave">
			<property name="src.dir" value="${requestleave.dir}" />
			<path id="test.set.source.path">
				<path refid="requestleave.source.path" />
			</path>
		</case>
		<case value="all">			
			<path id="test.set.source.path">
				<path refid="all.source.path" />
			</path>
		</case>
        <case value="other">			
			<path id="test.set.source.path">
				<path refid="other.source.path" />
			</path>
		</case>
	</switch>
	
    <target name="test.parallel">    
        <!-- check test.set has a valid value -->
        <assert message="Unrecognized value (${test.set}) for 'test.set'. Must be one of: all, other, saas, pickstock, requestleave.">
            <bool>
                <or>
                    <equals arg1="${test.set}" arg2="other" />
                    <equals arg1="${test.set}" arg2="all" />
                    <equals arg1="${test.set}" arg2="saas" />
                    <equals arg1="${test.set}" arg2="pickstock" />
                    <equals arg1="${test.set}" arg2="requestleave" />
                </or>
            </bool>
        </assert>
        <!-- run -->        
		<antcall target="clean" />
        <antcall target="compile" />                        
		<antcall target="run.parallel.test" />                
    </target>
	
    <target name="run.parallel.test">
        <var name="index" value="1"/>
        <echo message="List of running suite:" />
        <for param="test.source.absolute">                 
            <path refid="test.set.source.path" />
            <sequential>                
                <echo message="${index}. @{test.source.absolute}" />
                <math result="index" operand1="${index}" operation="+" operand2="1" datatype="int" />
            </sequential>
        </for>        
        <foreach target="run.single.test" 
                 maxthreads="20" 
                 inheritall="true" 
                 inheritrefs="true" 
                 parallel="true" 
                 param="test.source.absolute">
                 
            <path refid="test.set.source.path" />
        </foreach>        
    </target>
	
    <target name="run.single.test">
        <!-- strip off ${src.dir} from file path -->
        <pathconvert property="test.source.relative">
            <fileset file="${test.source.absolute}" />
            <map from="${basedir}/" to="" />
        </pathconvert>

        <path id="test.classpath">
            <fileset dir="${lib.dir}" includes="*.jar" />
        </path>
        <taskdef resource="testngtasks" classpath="${lib.dir}/testng.jar" />
        <!--Introduce random delay to try and start up swamping the app server too much-->
        <math result="delay" datatype="int">
            <op op="rint">
                <op op="*">
                    <num value="5" />
                    <op op="random" />
                </op>
            </op>
        </math>
        <sleep seconds="5" />                        
        <testng timeout="60000000"  
                failureproperty="tests.failed"  
                outputdir="${report.dir}"  
                parallel="${parallel.mode}"  
                threadCount="20"                  
                useDefaultListeners="false" 
        		listeners="com.abb.ventyx.utilities.Reporter">
            <jvmarg value="-Dtest.browser=${test.browser}" />
            <jvmarg value="-Dtest.username=${test.username}" />
            <jvmarg value="-Dtest.password=${test.password}" />
            <jvmarg value="-Dtest.district=${test.district}" />
            <jvmarg value="-Dtest.position=${test.position}" />
            <jvmarg value="-Dtest.email=${test.email}" />
            <jvmarg value="-Dtest.verify.code=${test.verify.code}" />
            <jvmarg value="-Dtest.ellipse.version=${test.ellipse.version}" />
            <jvmarg value="-Dtest.server.url=${test.server.url}" />
            <jvmarg value="-Dtest.selenium.port=${test.selenium.port}" />
            <jvmarg value="-Dtest.selenium.server=${test.selenium.server}" />
        	<jvmarg value="-Dtest.selenium.grid=${test.selenium.grid}" />
        	<jvmarg value="-Dtest.set=${test.set}" />
        	<jvmarg value="-Dother.source.expression=${other.source.expression}" />
        	<jvmarg value="-Dtest.developer.mode=${test.developer.mode}" />
            <classpath>
                <path refid="test.classpath" />
                <pathelement location="${bin.dir}"/>
            </classpath>
            <xmlfileset dir="${basedir}" includes="${test.source.relative}" />
        </testng>        
    </target>
	
	<target name="results.generate">
		
		<xslt in="${newreport.dir}/xml/results.xml"
			  out="${newreport.dir}/reportinfo.jelly"
			  style="${newreport.dir}/emailstyles/reportinfo.xsl"
			  processor="trax">						
			<classpath>                
				<pathelement location="${bin.dir}"/>
			</classpath>
		</xslt>
	
		<xslt in="${newreport.dir}/xml/results.xml"
			  out="${newreport.dir}/report.jelly"
			  style="${newreport.dir}/emailstyles/report.xsl"
			  processor="trax">						
			<classpath>                
				<pathelement location="${bin.dir}"/>
			</classpath>
		</xslt>
	</target>
	
	<target name="results.generateExcelResults">
		<java classname="parser.XMLToExcelParser" failonerror="true" fork="true">
			<classpath>                
				<fileset dir="${lib.dir}" includes="*.jar" />
			</classpath>
			<arg line="${env.BUILD_NUMBER} ${env.JOB_NAME} ${env.WORKSPACE}/SaaSAutomation/report/xml/results.xml" />
		</java>
	</target>
</project>
